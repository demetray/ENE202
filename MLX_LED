// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_MLX90614.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_MLX90614.h>


/*************************************************** 
  demetray@princeton.edu
  
  I adapted this library example for the MLX90614 Temp Sensor to phase an LED based on the object temperature read by the sensor.


  Designed specifically to work with the MLX90614 sensors in the
  adafruit shop
  ----> https://www.adafruit.com/products/1748
  ----> https://www.adafruit.com/products/1749

  These sensors use I2C to communicate, 2 pins are required to  
  interface
  Adafruit invests time and resources providing this open source code, 
  please support Adafruit and open-source hardware by purchasing 
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.  
  BSD license, all text above must be included in any redistribution
 ****************************************************/
/* USER INPUT */
int sample_rate = 2 * 1000; // how often you want device to publish where the number in front of a thousand is the seconds you want
/**/

// initialize vars for reading temp with MLX
double objectT = 0;
double ambientT = 0;

// initialize vars for LED, and mapping brightness
int led = 6;           // the PWM pin the LED is attached to
int brightness = 0;    // how bright the LED is

int fromLow = 20;       // temp range lower bound
int fromHigh = 25;     // temp range upper bound
int toLow = 0;          // LED brightness lower bound
int toHigh = 255;       // LED brightness upper bound


Adafruit_MLX90614 mlx = Adafruit_MLX90614();

// write map function
long mapnew(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void setup() {
    // Experimental notes
    Particle.variable("rate", sample_rate);  // Publish frequency

    Particle.variable("object", objectT);
    Particle.variable("ambient", ambientT);

    mlx.begin();  
    // declare pin to be an output:
    pinMode(led, OUTPUT);
}

void loop() {
    
// get MLX data
ambientT = mlx.readAmbientTempC();
objectT = mlx.readObjectTempC();

// map temp date to brightness level of LED
brightness = mapnew(objectT, fromLow, fromHigh, toLow, toHigh);
// set brightness of pin
analogWrite(led, brightness);

  /* ENCODE + PUBLISH */
 
  //Particle.publish("mlx.c,2 ","object:"+String(objectT)+" ambient:"+String(ambientT)+" ");
  
  Particle.publish("object", String(objectT), PRIVATE);
  Particle.publish("ambient", String(ambientT), PRIVATE);

  delay(sample_rate);

}

